version: '3.8'

services:
  redis:
    image: redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - backend
    healthcheck: # On verifie que le service est bien up
      test: ["CMD", "redis-cli", "ping"] 
      interval: 5s
      timeout: 5s
      retries: 3

  vote:
    build: ./vote
    ports:
      - "5001:5000"
    depends_on:
      - redis
    restart: always
    networks:
      - frontend
      - backend
    healthcheck: # On fait une requete sur le service pour verifier qu'il est up
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 5s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck: # On verifie que le service est bien up et ready pour read/write
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 3

  worker:
    build: ./worker
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - backend
    healthcheck: # On verifie que le process n'a pas crash.
      test: ["CMD-SHELL", "pidof dotnet || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3

  result:
    build: ./result
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - frontend
      - backend
    healthcheck: # On fait une requete sur le service pour verifier qu'il est up
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 5s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:

networks:
  frontend:
  backend:
